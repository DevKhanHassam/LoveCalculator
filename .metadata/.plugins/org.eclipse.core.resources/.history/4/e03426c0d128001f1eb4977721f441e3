package com.lc.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.lc.Dao.LvQuery;
import com.lc.Dao.userData;
import com.lc.Dto.UserData;
import com.lc.Dto.Handler.MytextHandler;
import com.lc.Service.EmailService;
import com.lc.Service.LoveService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@Controller
@SessionAttributes("userDataObj")
public class WebController {

	@Autowired
	EmailService emailService;

	@Autowired
	LoveService loveService;

	@Autowired
	LvQuery query;

	@RequestMapping("/")
	public String homePage(UserData userData, HttpServletRequest request) {
		HttpSession session = request.getSession();
		String userName = (String) session.getAttribute("userName");
		String crushName = (String) session.getAttribute("crushName");
		String userEmail = (String) session.getAttribute("userEmail");
		Integer userAge = (Integer) session.getAttribute("userAge");

		userData.setUserName(userName);
		userData.setCrushName(crushName);
		userData.setEmailAddress(userEmail);
		userData.setUserAge(userAge);

		return "home";
	}

	@RequestMapping("/userDetails")
	public String userDetails(@Valid UserData userDataObj, BindingResult result, HttpServletRequest request,
			Model model) {
		HttpSession session = request.getSession();
		session.setMaxInactiveInterval(120);

		String userName = userDataObj.getUserName();
		String crushName = userDataObj.getCrushName();
		int age = userDataObj.getUserAge();
		String email = userDataObj.getEmailAddress();

		session.setAttribute("userName", userName);
		session.setAttribute("crushName", crushName);
		session.setAttribute("userAge", age);
		session.setAttribute("userEmail", email);

		String loveResult = loveService.result();

		session.setAttribute("loveResult", loveResult);

		if (result.hasErrors()) {
			List<ObjectError> allErrors = result.getAllErrors();
			for (ObjectError temp : allErrors) {
				System.out.println(temp);
			}

			return "home";
		}

		return "userDetails";
	}

	@RequestMapping("/resultSave")
	public String ResultsaveInDb(HttpServletRequest request, Model model) {

		HttpSession session = request.getSession();

		String userName = (String) session.getAttribute("userName");
		String crushName = (String) session.getAttribute("crushName");
		String email = (String) session.getAttribute("userEmail");
		int age = (int) session.getAttribute("userAge");
		String result = (String) session.getAttribute("loveResult");

		query.addUserData(userName, crushName, age, email, result);
		query.showData(userName, email);

		return "redirect:/result"; // Redirect
	}

	@RequestMapping("/result")
	public String showResult() {
		return "result";
	}

	@RequestMapping("/sendResult")
	public String sendResult(HttpServletRequest request)

	{

		HttpSession session = request.getSession();

		String result = (String) session.getAttribute("loveResult");
		String userName = (String) session.getAttribute("userName");
		String crushName = (String) session.getAttribute("crushName");
		String email = (String) session.getAttribute("userEmail");
		emailService.emailSend(userName, crushName, email, result);

		return "sendResult";
	}

	@RequestMapping("/showRecords")
	public String showRecords(HttpServletRequest request, Model model) {
		HttpSession session = request.getSession();

		String userName = (String) session.getAttribute("userName");
		String email = (String) session.getAttribute("userEmail");

		List<userData> loveList = query.showData(userName, email);
		System.out.println(loveList);

		model.addAttribute("loveList", loveList);

		return "showRecords";
	}

	@InitBinder
	public void initBinder(WebDataBinder binder) {

		StringTrimmerEditor editor = new StringTrimmerEditor(true);

		binder.registerCustomEditor(String.class, "userName", editor);

		binder.registerCustomEditor(String.class, "userName", new MytextHandler());
		binder.registerCustomEditor(String.class, "crushName", new MytextHandler());
	}

}
